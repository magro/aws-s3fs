# Copyright (C) 2012 Ole Wolf <wolf@blazingangles.com>
#
# This file is part of aws-s3fs.
# 
# aws-s3fs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# AT_CHECK_HELP_OUTPUT(OPTION, EXPECT)
# ------------------------------------
# Check that 'aws-s3fs OPTION' outputs something containing 'EXPECT'.
m4_define([AT_CHECK_HELP_OUTPUT],
[AT_CHECK([aws-s3fs $1], [], [stdout])
AT_CHECK([grep $2 stdout], [], [ignore])]
)


AT_BANNER([Command Line Tests])

# Test whether the executable exists.
AT_SETUP([Executable exists])
#AT_CHECK([test -f ../../../src/aws-s3fs || exit 77])
AT_CHECK([test -f ../../../src/aws-s3fs])
AT_CLEANUP

AT_SETUP([Informational pages output])
# Test --version and -V output.
AT_CHECK_HELP_OUTPUT([--version], ['aws-s3fs version @<:@0-9@:>@\{1,2\}\.@<:@0-9@:>@\{1,3\}'])
AT_CHECK_HELP_OUTPUT([-V], ['aws-s3fs version @<:@0-9@:>@\{1,2\}\.@<:@0-9@:>@\{1,3\}'])
# Test --help and -h output.
AT_CHECK_HELP_OUTPUT([--help], ['aws-s3fs \@<:@options\@:>@ \@<:@bucket:\@<:@path\@:>@\@:>@ dir'])
AT_CHECK_HELP_OUTPUT([-h], ['aws-s3fs \@<:@options\@:>@ \@<:@bucket:\@<:@path\@:>@\@:>@ dir'])
# Test --license and -L output.
AT_CHECK_HELP_OUTPUT([--license], ['aws-s3fs Copyright (C) 201@<:@2-9@:>@ Ole Wolf'])
AT_CHECK_HELP_OUTPUT([-L], ['aws-s3fs Copyright (C) 201@<:@2-9@:>@ Ole Wolf'])
AT_CLEANUP

# Test invalid command-line switch.
AT_SETUP([Invalid command-line switch])
AT_CHECK([echo "`aws-s3fs -j 2>&1 >/dev/null`"], [], [stdout])
AT_CHECK([grep 'aws-s3fs: invalid option -- .j.$' stdout], [], [ignore])
AT_CLEANUP

# Test the "SplitS3MountPath" function.
AT_SETUP([SplitS3MountPath])
AT_CHECK([test-decodecmdline SplitS3MountPath], [], [stdout])
AT_CHECK([grep '^0: bucket:path = (bucket)-(path)$' stdout], [], [ignore])
AT_CHECK([grep '^1: "bucket:path" = ("bucket)-(path")$' stdout], [], [ignore])
AT_CHECK([grep '^2: bucket:path" = (bucket)-(path")$' stdout], [], [ignore])
AT_CHECK([grep '^3: "bucket:path = ("bucket)-(path)$' stdout], [], [ignore])
AT_CHECK([grep '^4: "bucket":path = ("bucket")-(path)$' stdout], [], [ignore])
AT_CHECK([grep '^5:  bucket : path  = (bucket)-(path )$' stdout], [], [ignore])
AT_CHECK([grep '^6: NULL = (NULL)-(NULL)$' stdout], [], [ignore])
AT_CHECK([grep '^7:  bucketpath  = (bucketpath)-()$' stdout], [], [ignore])
AT_CHECK([grep '^8: bucketpath:  = (bucketpath)-()$' stdout], [], [ignore])
AT_CHECK([grep '^9: :bucketpath = ()-(bucketpath)$' stdout], [], [ignore])
AT_CHECK([grep '^10:  bucket\\:path  = (bucket\\:path)-()$' stdout], [], [ignore])
AT_CHECK([grep '^11: bucket\\::path = (bucket\\:)-(path)' stdout], [], [ignore])
AT_CLEANUP

AT_SETUP([DecodeCommandLine])
AT_CHECK([test-decodecmdline DecodeCommandLine 1], [], [stdout])
AT_CHECK([grep '^1: R 2 B bucketname P pathname k key:secret l syslog v 1 m mountdir/dir c configfile d 1$' stdout], [], [ignore])
AT_CHECK([test-decodecmdline DecodeCommandLine 2], [], [stdout])
AT_CHECK([grep '^2: R 2 B bucketname2 P  k key:secret l syslog v 0 m mountdir/dir c configfile d 1$' stdout], [], [ignore])
AT_CHECK([test-decodecmdline DecodeCommandLine 3], [], [stdout])
AT_CHECK([grep '^3: R 0 B bucketname3 P  k (null):(null) l (null) v 0 m mountdir/dir c (null) d 1$' stdout], [], [ignore])
AT_CHECK([test-decodecmdline DecodeCommandLine 4], [], [stdout])
AT_CHECK([grep '^4: R 0 B bucketname4 P path4 k (null):(null) l (null) v 0 m mountdir/dir c (null) d 1$' stdout], [], [ignore])
AT_CHECK([test-decodecmdline DecodeCommandLine 5], [], [stdout])
AT_CHECK([grep '^5: R 0 B  P path5 k (null):(null) l (null) v 0 m mountdir/dir c (null) d 1$' stdout], [], [ignore])
AT_CHECK([test-decodecmdline DecodeCommandLine 6], [], [stdout])
AT_CHECK([grep '^6: R 0 B  P override k (null):(null) l (null) v 0 m mountdir/dir c (null) d 1$' stdout], [], [ignore])
AT_CHECK([test-decodecmdline DecodeCommandLine 7], [], [stdout])
AT_CHECK([grep '^7: R 0 B overridebucket7 P overridepath7 k (null):(null) l (null) v 0 m mountdir/dir c (null) d 1$' stdout], [], [ignore])
AT_CHECK([test-decodecmdline DecodeCommandLine 8], [], [stdout])
AT_CHECK([grep '^8: R 0 B overridebucket8 P overridepath8 k (null):(null) l (null) v 0 m mountdir/dir c (null) d 1$' stdout], [], [ignore])
AT_CHECK([test-decodecmdline DecodeCommandLine 9], [], [stdout])
AT_CHECK([grep '^9: R 0 B overridebucket9 P overridepath9 k (null):(null) l (null) v 0 m mountdir/dir c (null) d 1$' stdout], [], [ignore])
AT_CHECK([test-decodecmdline DecodeCommandLine 10], [], [stdout])
AT_CHECK([grep '^10: R 0 B overridebucket10 P override1 k (null):(null) l (null) v 0 m mountdir/dir c (null) d 1$' stdout], [], [ignore])
AT_CHECK([test-decodecmdline DecodeCommandLine 11], [], [stdout])
AT_CHECK([grep '^11: R 0 B bucket11 P overridepath11 k (null):(null) l (null) v 0 m mountdir/dir c (null) d 1$' stdout], [], [ignore])
AT_CHECK([test-decodecmdline DecodeCommandLine 12], [], [stdout])
AT_CHECK([grep '^12: R 0 B bucket11 P path11 k (null):(null) l (null) v 0 m mountdir/dir c (null) d 0$' stdout], [], [ignore])
AT_CLEANUP
